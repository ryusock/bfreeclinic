#QuickPrint#get client info (with some input checks)try:    # for Python2    from Tkinter import *   ## notice capitalized T in Tkinter except ImportError:    # for Python3    from tkinter import *   ## notice lowercase 't' in tkinter hereimport tkMessageBoximport urllib2##if you need to get rid of eol character manually##for line in range(0,len(html_parsed)):##	if html_parsed[line] == 'zip_code,distance,city,state':##		html_parsed[line]="00000"##	else:##		html_parsed[line]=html_parsed[line][0:5]##for line in html_parsed: ##  if line.strip():           # line contains eol character(s)##       n = int(line)          # assuming single integer on each lineGENDERS = ["Male", "Female", "Transgender Male", "Transgender Female", "Genderqueer", "Gender Non-Conforming", "Other"]RACES = ["Asian", "Latin@", "White", "Black", "Other"]HOUSING = ["Stable", "Unstable", "Homeless"]#fiddle around with these constants to reweigh factors in searchZfactor = 8Afactor = 2Gfactor = 4Rfactor = 6Ifactor = 7Hfactor = 3Lfactor = 5#list containing dictionaries that represent each resource	#each entry in the dictionary represents a characteristic of that resource	#that should contribute to the match score of that resource	#if the characteristic = 1, that resource serves people with specific	#needs in that area (ie. insurance = 1 means that that resource	# serves uninsured people)resources=[	{ 'name': "La Clinica", 'zipcode':94601, 'age':1, 'gender':[], 'race':['Latin@'], 'insurance':1, 'housing':0, 'legal':0}, 	{ 'name': "AHF Oakland Healthcare Center", 'zipcode':94609, 'age':0, 'gender':[], 'race':[], 'insurance':1, 'housing':1, 'legal':1}, 	{ 'name': "Asian Medical Center", 'zipcode':94601, 'age':1, 'gender':[], 'race':['Asian'], 'insurance':1, 'housing':0, 'legal':1}, 	{ 'name': "Alameda County Office of AIDS", 'zipcode':94609, 'age':0, 'gender':[], 'race':[], 'insurance':1, 'housing':1, 'legal':1}, 	{ 'name': "Alameda Health System", 'zipcode': 94578, 'age':0, 'gender':[], 'race':[], 'insurance':0, 'housing':0, 'legal':0}, 	{ 'name': "APEB Oakland", 'zipcode': 94607, 'age':0, 'gender':[], 'race':[], 'insurance':1, 'housing':1, 'legal':1}, 	{ 'name': "CFMG (Santa Rita Jail)", 'zipcode': 94568, 'age':0, 'gender':[], 'race':[], 'insurance':0, 'housing':0, 'legal':0}, 	{ 'name': "Kaiser Permanente", 'zipcode': 94568, 'age':0, 'gender':[], 'race':[], 'insurance':0, 'housing':0, 'legal':0}, 	{ 'name': "LifeLong Ashby Health Center", 'zipcode': 94704, 'age':0, 'gender':[], 'race':[], 'insurance':1, 'housing':1, 'legal':1 }, 	{ 'name': "LifeLong Ashby Health Center East Oakland", 'zipcode': 94601, 'age':0, 'gender':[], 'race':[], 'insurance':1, 'housing':1, 'legal':1 }, 	{ 'name': "LifeLong Ashby Health Center Brookside Richmond", 'zipcode': 94804, 'age':0, 'gender':[], 'race':[], 'insurance':1, 'housing':1, 'legal':1 }, 	{ 'name': "Summit Health Alta Bates East Bay AIDS Center", 'zipcode': 94609, 'age':0, 'gender':[], 'race':[], 'insurance':1, 'housing':1, 'legal':0 },	{ 'name': "Summit Health Alta Bates Youth Clinic", 'zipcode': 94609, 'age':0, 'gender':[], 'race':[], 'insurance':1, 'housing':1, 'legal':0},	{ 'name': "Tri-City Health Center", 'zipcode': 94538, 'age':0, 'gender':[], 'race':[], 'insurance':1, 'housing':1, 'legal':1},	{ 'name': "WORLD Women's Clinic", 'zipcode': 94609, 'age':0, 'gender':["Female"], 'race':[], 'insurance':1, 'housing':1, 'legal':1},	{ 'name': "Contra Costa Health Services Pittsburg Health Center", 'zipcode': 94565, 'age':0, 'gender':[], 'race':[], 'insurance':1, 'housing':1, 'legal':1},	{ 'name': "Contra Costa Health Services Martinez Health Center", 'zipcode': 94553, 'age':0, 'gender':[], 'race':[], 'insurance':1, 'housing':1, 'legal':1},	{ 'name': "Contra Costa Health Services West County Health Center", 'zipcode': 94806, 'age':0, 'gender':[], 'race':[], 'insurance':1, 'housing':1, 'legal':1},	{ 'name': "Contra Costa Health Services Brentwood Health Center", 'zipcode': 94513, 'age':0, 'gender':[], 'race':[], 'insurance':1, 'housing':1, 'legal':1},	{ 'name': "Solano County Family Health Services HIV Clinical Services - NORBAC", 'zipcode': 94590, 'age':0, 'gender':[], 'race':[], 'insurance':1, 'housing':1, 'legal':1},	{ 'name': "Solano County Family Health Services Fairfield", 'zipcode': 94533, 'age':0, 'gender':[], 'race':[], 'insurance':1, 'housing':1, 'legal':1},	{ 'name': "Solano County Family Health Services Community Medical Centers", 'zipcode': 95687, 'age':0, 'gender':[], 'race':[], 'insurance':1, 'housing':1, 'legal':1},	{ 'name': "Housing for HIV + clients ", 'zipcode': 95687, 'age':1, 'gender':[], 'race':[], 'insurance':0, 'housing':1, 'legal':0},	{ 'name': "Covenant House California", 'zipcode': 94607, 'age':1, 'gender':[], 'race':[], 'insurance':0, 'housing':1, 'legal':0},	{ 'name': "Turning Point - Fred Finch Youth Center Berkeley", 'zipcode': 94703, 'age':1, 'gender':[], 'race':[], 'insurance':0, 'housing':1, 'legal':0},	{ 'name': "East Bay Community Law Center", 'zipcode': 94703, 'age':1, 'gender':[], 'race':[], 'insurance':0, 'housing':0, 'legal':1}]#so far, resource_matcher just matches client zipcode to resource zipcode	#by cycling through all the zipcodes within set distance of client zip	#to see if the resource zip falls within set distance of the client zipdef resource_matcher(zipcode, age, gender, race, insurance, housing, legal):	#generate zipcodes within 5 miles of client's zipcode	zip_url='https://www.zipcodeapi.com/rest/JnFijCTxwVHskfyn6ujiCFPlNmVMBkqkH6D0IwyfsfHMugaBKuUn9JIX6EJHYa2G/radius.csv/'+str(zipcode)+'/5/mile'	response = urllib2.urlopen(zip_url)	html = response.read()	html_parsed=html.split("\n")	scores=[]	zip_match=0	age_match=0	gender_match=0	race_match=0	insurance_match=0	housing_match=0	legal_match=0	best_score = 0	#for each resource, create a score and add it to the list "scores"	#keep list "scores" in the same order of the resources in order to know	#which score belongs to which resource	for n in range(0,len(resources)):		score=0		#is the location of the resource within 5 miles of the client?		for m in range(1,len(html_parsed)-1):			if resources[n]['zipcode'] == int(html_parsed[m][0:5]):				zip_match = 1		#if the client is young or old, match them to a resources for youth/seniors		if age <= 25 or age >=65: #wasnt sure what age counts as seniors - seok			if resources[n]['age'] == 1:				age_match = 1		#if the client can be matched to a resource for a specific gender, match them		#if the resource is not gender-specific, its gender attribute should be an empty list		if len(resources[n]['gender']) > 0:			if gender in resources[n]['gender']:				gender_match = 1		#if the client can be matched to a resource for a specific race, match them		#if the resource is not race-specific, its race attribute should be an empty list		if len(resources[n]['race']) > 0:			if race in resources[n]['race']:				race_match = 1				#if the client does not have insurance, match them to a resource that provides		#for uninsured patients		if resources[n]['insurance'] == 1:			if insurance == 'N':				insurance_match = 1		#if the client can be matched to a resource that accomodates persons who require		#housing resources, match them		if resources[n]['housing'] == 1:			if housing == 'Unstable' or housing =='Homeless':				housing_match = 1		#if the client is undocumented, match them to a resource that accomodates 		#undocumented patients		if resources[n]['legal'] == 1:			if legal == 'N':				legal_match = 1		#fiddle around with these numbers to see which provides the most fitting score -seok		score = zip_match*Zfactor + age_match*Afactor + gender_match*Gfactor + race_match*Rfactor + insurance_match*Ifactor + housing_match*Hfactor + legal_match*Lfactor		if score > best_score:			best_score = score		scores.append(score)		msg = "Best fit scores for each resource"		for n in range(len(scores)):			#asterisk indicates the resource with the best score			if scores[n] == best_score:				msg += "\n" + "* "+str(scores[n]) +" (" +resources[n]['name'] + ")"			else:				msg += "\n" + str(scores[n]) + " (" +resources[n]['name'] + ")"		return msg	## APPLICATION GUI (BEGIN)def submit():	success = True	errormsg = ""	housing = houseVar.get()	if housing == "Click to see options":		errormsg = "Please pick a housing status"		success = False	race = raceVar.get()	if race == "Click to see options":		errormsg = "Please pick a race"		success = False	gender = genderVar.get()	if gender == "Click to see options":		errormsg = "Please pick a gender identity"		success = False	try:		age = int(E2.get())	except ValueError:		errormsg = "Age must be a positive number"		success = False	try:		zipcode = int(E1.get())		if len(E1.get()) != 5:			errormsg = "Invalid zipcode"			success = False	except ValueError:		errormsg = "Invalid zipcode"		success = False	insurance = int(insuredVar.get())	legal = int(legalVar.get())	if not success:		tkMessageBox.showinfo("Submission error", errormsg)	else:		message = resource_matcher(zipcode, age, gender, race, insurance, housing, legal)		tkMessageBox.showinfo("Patient score", message)root = Tk()root.title("Patient-to-Hospital Match")zipframe = Frame(root)zipframe.pack()L1 = Label(zipframe, text="Please enter client's zipcode: ")L1.pack( side = LEFT)E1 = Entry(zipframe, bd=2, width=5)E1.pack(side = RIGHT)ageframe = Frame(root)ageframe.pack()L2 = Label(ageframe, text="Please enter client's age: ")L2.pack( side = LEFT)E2 = Entry(ageframe, bd=1, width=2)E2.pack(side = RIGHT)genderframe = Frame(root)genderframe.pack()L3 = Label(genderframe, text="Please enter client's gender identity: ")L3.pack(side = LEFT)genderVar = StringVar(genderframe)genderVar.set("Click to see options")M3 = apply(OptionMenu, (genderframe, genderVar) + tuple(GENDERS))M3.pack(side = RIGHT)raceframe = Frame(root)raceframe.pack()L4 = Label(raceframe, text="Please enter client's race: ")L4.pack(side = LEFT)raceVar = StringVar(raceframe)raceVar.set("Click to see options")M4 = apply(OptionMenu, (raceframe, raceVar) + tuple(RACES))M4.pack(side = RIGHT)housingframe = Frame(root)housingframe.pack()L5 = Label(housingframe, text="What is this client's housing status? ")L5.pack(side = LEFT)houseVar = StringVar(housingframe)houseVar.set("Click to see options")M5 = apply(OptionMenu, (housingframe, houseVar) + tuple(HOUSING))M5.pack(side = RIGHT)insuranceframe = Frame(root)insuranceframe.pack()L6 = Label(insuranceframe, text="Is this client insured (public or private) or uninsured?: ")L6.pack(side=LEFT)insuredVar = IntVar()C6 = Checkbutton(insuranceframe, variable = insuredVar, onvalue = 1, offvalue = 0)C6.pack(side = RIGHT)legalframe = Frame(root)legalframe.pack()L7 = Label(legalframe, text="Is this client undocumented?: ")L7.pack(side=LEFT)legalVar = IntVar()C6 = Checkbutton(legalframe, variable = legalVar, onvalue = 1, offvalue = 0)C6.pack(side = RIGHT)submitframe = Frame(root)submitframe.pack()B = Button(submitframe, text ="Search", command = submit)B.pack()root.mainloop()## APPLICATION GUI (END)#Soyun! Thanks for helping. I'm envisioning having a score for each#resource (La Clinica, EBAC, etc.) that represents how well that resource#matches the client. For example, if the client is an undocumented Latina#lady who doesn't have insurance, the score for La Clinica should be high.#Right now, score just tells you whether the zipcode is close to the client.#since I've only implemented zip_match and age_match.#I'm thinking it might be good to weight certain matches above others,#like zip_match is very important because if the client is far away from#the resource, it doesn't matter if it's a good fit. But that will come#after all the matches are implemented. PLEASE let me know if something#doesn't make sense, I'm not the best programmer. Thanks!#